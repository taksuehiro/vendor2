AWSTemplateFormatVersion: '2010-09-09'
Description: 'ベンダー検索RAGアプリケーション用EC2インスタンス'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2インスタンス用のキーペア名
    ConstraintDescription: 有効なキーペア名を指定してください

  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2インスタンスタイプ

  VolumeSize:
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 100
    Description: ルートボリュームサイズ（GB）

Resources:
  # セキュリティグループ
  VendorRAGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ベンダー検索RAGアプリケーション用セキュリティグループ
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
          Description: Streamlitアプリケーション
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: すべてのアウトバウンド通信
      Tags:
        - Key: Name
          Value: vendor-rag-sg

  # EC2インスタンス
  VendorRAGInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023 (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref VendorRAGSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip git
          
          # プロジェクトディレクトリの作成
          mkdir -p /home/ec2-user/vendor-rag-app
          cd /home/ec2-user/vendor-rag-app
          
          # GitHubリポジトリのクローン
          git clone https://github.com/taksuehiro/vendor2.git .
          
          # Python仮想環境の作成
          python3 -m venv venv
          source venv/bin/activate
          
          # 依存関係のインストール
          cd vendor_rag_app
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # 環境変数ファイルの作成
          cat > .env << EOF
          OPENAI_API_KEY=sk-proj-zZgZjBlWYnlua91oh1nKT3BlbkFJ5qeKOfTIDe8Q6GIQzK23
          EOF
          
          # Streamlit設定ファイルの作成
          mkdir -p ~/.streamlit
          cat > ~/.streamlit/config.toml << EOF
          [server]
          port = 8501
          address = "0.0.0.0"
          enableCORS = false
          enableXsrfProtection = false
          
          [browser]
          gatherUsageStats = false
          EOF
          
          # systemdサービスファイルの作成
          cat > /etc/systemd/system/vendor-rag-app.service << EOF
          [Unit]
          Description=Vendor RAG App
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user/vendor-rag-app/vendor_rag_app
          Environment=PATH=/home/ec2-user/vendor-rag-app/venv/bin
          ExecStart=/home/ec2-user/vendor-rag-app/venv/bin/streamlit run app.py --server.port 8501 --server.address 0.0.0.0
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # サービスの有効化と開始
          systemctl daemon-reload
          systemctl enable vendor-rag-app
          systemctl start vendor-rag-app
          
          # ファイアウォール設定
          yum install -y firewalld
          systemctl start firewalld
          systemctl enable firewalld
          firewall-cmd --permanent --add-port=8501/tcp
          firewall-cmd --reload
          
          # 完了メッセージ
          echo "デプロイが完了しました！" > /home/ec2-user/deploy-complete.txt
      Tags:
        - Key: Name
          Value: vendor-rag-instance
        - Key: Environment
          Value: Production
        - Key: Application
          Value: VendorRAG

  # Elastic IP
  VendorRAGElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref VendorRAGInstance
      Tags:
        - Key: Name
          Value: vendor-rag-eip

  # IAMロール（CloudWatch Logs用）
  VendorRAGInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: vendor-rag-instance-role

  # IAMインスタンスプロファイル
  VendorRAGInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref VendorRAGInstanceRole

Outputs:
  InstanceId:
    Description: EC2インスタンスID
    Value: !Ref VendorRAGInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  PublicIP:
    Description: Elastic IPアドレス
    Value: !Ref VendorRAGElasticIP
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  SecurityGroupId:
    Description: セキュリティグループID
    Value: !Ref VendorRAGSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  ApplicationURL:
    Description: アプリケーションURL
    Value: !Sub "http://${VendorRAGElasticIP}:8501"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationURL"

  SSHCommand:
    Description: SSH接続コマンド
    Value: !Sub "ssh -i ${KeyPairName}.pem ec2-user@${VendorRAGElasticIP}"
    Export:
      Name: !Sub "${AWS::StackName}-SSHCommand"


